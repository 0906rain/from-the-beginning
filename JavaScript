JavaScript란 ?
- HTML과 CSS로 구성된 웹 페이지를 동적으로 만들어주는 언어

기본 문법

변수
변수 선언 방법 3가지

var의 특징

- 변수가 재선언과 업데이트가 가능
```javascript
ex)
var x = 1; // x는 1로 선언
var x = 2; // x는 2로 재선언
x = 3; // x는 3으로 업데이트
```
- 변수의 재선언과 업데이트가 가능하여 의도치 않게 재선언 혹은 업데이트가 된다.
ex)
var name = "Lee"; // name을 Lee로 선언
var x = 1; // x를 1로 선언
if(x == 1) { // if문 x의 값이 1이랑 같을 때 
  var name = "Kim"; // name을 Kim로 선언
  console.log(name); // name이 Kim 출력
};
예시와 같이 할 경우 name 변수에 할당된 값이 원래 Lee 였으나 if문에 들어가서 name이 재선언 되어 기존에 변수 name이 정의되어 있다는 것을 인식이 안된다.
만약 의도적으로 재선언은 괜찮지만 의도적으로 한게 아니라면 원치 않은 결과 값이 나올수있어서 문제가 된다.

var의 호이스팅은 var변수가 범위 내에서 맨 위로 올려지고 값은 undefined(정의되지 않음)으로 초기화된다.
ex.1)
console.log (name); // 로그에 name 변수 출력
var name = "Lee"; // name을 Lee로 선언
ex.2)
var name;
console.log(name); // name 변수 값 undefined
name = "Lee"; // name 변수 값 Lee로 업데이트
위 1번 예시를 자바스크립트는 2번 예시로 해석하게된다.  

let의 특징
- 변수가 업데이트는 가능, 재선언은 불가능
ex)
let x = 1; // x는 1로 선언
let x = 2; // 코드 에러가 뜬다. Reference Error(참조 오류)
x = 2; // x는 2로 업데이트는 에러가 없다.

- var와 다르게 let은 범위 내에서 재선언이 안된다. 단 동일한 변수가 다른 범위내에서 정의된다면, 에러는 발생하지 않는다.
ex) 
let name = "Lee"; // name에 Lee로 선언
let name = "Kim"; // Identifier 'name' has already been declared. 이미 선언되어 있다고 에러가 발생
if ( x == 2){
  let name = "Kim"; // name을 kim으로 선언
};
예시와 같이 할 경우 name 변수가 선언되고 같은 범위에 다시 재선언 하였을 때 이미 선언되어 있다고 에러가 떳지만 if문(다른범위)안에 선언한 경우 에러 없이 실행이 된다. 
